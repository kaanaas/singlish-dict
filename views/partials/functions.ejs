<%
    // @{} link function
    formatDyno = function (s) {
        // internal links
        // const regExStr = /@\{([0-9a-zA-Z \|',\-]{1,})\}/g;
        const regExStr = /@\{([^\{\}]{1,})\}/g;
        const match = s.match(regExStr);
        if (match) { 
            for (let i = 0; i < match.length; i++){
                let w = "", wUrl = "";
                // look for alternate display/urlTerm marker "|"
                if(match[i].indexOf("|") == -1){
                    w = match[i].substring(2, match[i].length - 1);
                    wUrl = match[i].substring(2, match[i].length - 1).replace(/ /g,"%20");
                } else {
                    let bar = match[i].indexOf("|");
                    w = match[i].substring(2, bar);
                    wUrl = match[i].substring(bar+1, match[i].length - 1).replace(/ /g,"%20");
                }
                s = s.replace(match[i], `\<a href="./?q=${wUrl}" class="underline">\<i>${w}\</i>\</a>`);
            }
        }

        // sources citing
        const regExStrSrc = /\^\{([0-9a-zA-Z ',\-]{1,})\}/g;
        const matchSrc = s.match(regExStrSrc);
        if (matchSrc) {
            for (let i = 0, sCount = 1; i < matchSrc.length; i++){
                let src = matchSrc[i].substring(2, matchSrc[i].length - 1);
                if(!isNaN(src)){
                    s = s.replace(matchSrc[i], `\<sup>\<span class="ref">\<i>[${src}]\</i>\</span>\</sup>`);
                }
                if(sources[src]){
                    if(sources[src].type != undefined && (sources[src].type == "web" || sources[src].type == "journal")){
                        s = s.replace(matchSrc[i], `\<sup>\<a href="${sources[src].link}" title="${sources[src].name}" class="ref">\<i>[s${sCount}]\</i>\</a>\</sup>`);
                        sCount++;
                    }
                    if(sources[src].type != undefined && (sources[src].type == "book")){
                    s = s.replace(matchSrc[i], 
                        `\<sup>\<a href="/sources" title="${sources[src].year}, ${sources[src].author}.\<i>${sources[src].title}\</i>,${sources[src].publisher}" class="ref">\<i>[s${sources[src].id}]\</i>\</a>\</sup>`);
                    }
                }
            }
        }

        // special symbols
        const regExStrHash = /#\{([0-9a-zA-Z ',:\-]{1,})\}/g;
        const matchHash = s.match(regExStrHash);
        if (matchHash) {
            for (let i = 0; i < matchHash.length; i++){ 
                let word = matchHash[i].substring(2, matchHash[i].length - 1);
                // wiktionary link
                if(word.toLowerCase().substring(0, 2) == "w:") {
                    let wordUrl = word.substring(2, word.length);
                    s = s.replace(matchHash[i], `\<a href="https://en.wiktionary.org/wiki/${wordUrl}" class="underline">\<i>${wordUrl}\</i>\</a>`);
                }

                // special symbols
                if(word.toLowerCase() == "warn") {
                    s = s.replace(matchHash[i], `\<i class=\"fa-solid fa-triangle-exclamation\">\</i>`);
                }
                if(word.toLowerCase() == "dubious") {
                    s = s.replace(matchHash[i], `\<i class="fa-regular fa-circle-question" title="Dubious or unconfirmed" style="color:rgb(207, 96, 6); margin-right:0.15em">\</i>`);
                }
                if(word.toLowerCase() == "poss") {
                    s = s.replace(matchHash[i], `\<i class="fa-solid fa-flag" title="Possible, but not certain" style="color:orange; margin-right:0.15em"">\</i>`);
                }
                if(word.toLowerCase() == "likely") {
                    s = s.replace(matchHash[i], `\<i class="fa-solid fa-shuffle" title="Likely, but other possible etymologies exist" style="color:mediumspringgreen; margin-right:0.15em"">\</i>`);
                }
                if(word.toLowerCase() == "red") {
                    s = s.replace(matchHash[i], "");
                    s = "\<p style=\"color:rgb(192, 2, 25);\">" + s + "\</p>";
                }
            }
        }
        return s;
    }

    formatIdLink = function (s) {
        // makes word#{_id} link to specific meaning of the word where _id is coded as #[word][idNumber]
        let regExStr = /\#\{([0-9]{1,})\}/g;
        let match = s.match(regExStr);
        if (match) {
            let id = match[0].substring(2, match[0].length - 1);
            let word = s.replace(match[0], '');
            s = word + '#' + word + id;
        }
        return s;
    }

    formatId = function (s) {
        // displays word#{_id} as just word_[sub]id
        let regExStr = /\#\{([0-9]{1,})\}/g;
        let match = s.match(regExStr);
        if (match) {
            let id = match[0].substring(2, match[0].length - 1);
            s = s.replace(match[0], `<sub>${id}</sub>`);
        }
        return s;
    }

    formatNym = function (s) {
        // synonyms - if using *{particle} format
        let regExStr = /\*\{([0-9a-zA-Z ',\-]{1,})\}/g;
        const match = s.match(regExStr);
        if (match) {
            for (let i = 0; i < match.length; i++){
                let w = match[i].substring(2, match[i].length - 1);
                s = s.replace(match[i], w)
            }
        } 
        s = formatId(s);
        
        return s;
    }

    formatNymLink = function (s) {
        // synonyms
        let regExStr = /\*\{([0-9a-zA-Z ',\-]{1,})\}/g;
        let match = s.match(regExStr);
        if (match) {
            for (let i = 0; i < match.length; i++){
                s = s.replace(match[i], '');
            }
        }
        s = formatIdLink(s);

        return s;
    }

%>